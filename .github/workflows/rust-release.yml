name: Rust Release

# Controls when the action will run. Workflow runs when manually triggered using the UI
# or API.
on:
  workflow_dispatch:
    # Inputs the workflow accepts.
    inputs:
      version:
        description: "Release level (major / minor / patch / alpha / beta / rc)"
        required: true
        type: choice
        options:
          - patch
          - minor
          - major
          - alpha
          - beta
          - rc
      dry-run:
        description: "Dry run (no changes will be made)"
        required: false
        type: boolean
        default: false

jobs:
  publish:
    name: Publish to crates.io
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      new_version: ${{ steps.extract_version.outputs.version }}
    steps:
      # Check out the repo with full history and deploy key
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ssh-key: ${{ secrets.DEPLOY_KEY }}

      # Setup Rust
      - name: Setup Rust toolchain
        run: |
          rustup update stable
          rustup default stable
          rustup component add rustfmt clippy

      # Install cargo-release using cargo directly
      - name: Install cargo-release
        run: cargo install cargo-release --verbose

      # Configure Git
      - name: Configure Git
        run: |
          git config user.name 'Abhishek Nath'
          git config user.email 'abhi.nath@outlook.com'

      # Setup crates.io token
      - name: Setup crates.io token
        run: |
          mkdir -p ~/.cargo
          echo "[registry]" > ~/.cargo/credentials
          echo "token = \"${{ secrets.CARGO_REGISTRY_TOKEN }}\"" >> ~/.cargo/credentials
          chmod 600 ~/.cargo/credentials

      # Dry run if requested
      - name: Cargo Release Dry Run
        if: ${{ inputs.dry-run }}
        run: cargo release ${{ github.event.inputs.version }} --no-confirm

      # Execute release if not dry-run
      - name: Cargo Release Execute
        if: ${{ !inputs.dry-run }}
        run: cargo release ${{ github.event.inputs.version }} --execute --no-confirm --push

      # Extract the new version tag that was just created
      - name: Extract new version
        if: ${{ !inputs.dry-run }}
        id: extract_version
        run: |
          # Get the latest tag which would be the one just created
          NEW_TAG=$(git describe --tags --abbrev=0)
          echo "version=${NEW_TAG}" >> "${GITHUB_OUTPUT}"
          echo "Created new version: ${NEW_TAG}"

  build:
    name: Build for ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    needs: publish
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            artifact_name: neaten
            platform_name: linux-amd64
          - os: windows-latest
            artifact_name: neaten.exe
            platform_name: windows-amd64
          - os: macos-latest
            artifact_name: neaten
            platform_name: macos-amd64

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch all history and tags
          ref: ${{ needs.publish.outputs.new_version }} # Checkout the new tag

      # Use native GitHub Actions for Rust setup
      - name: Setup Rust toolchain
        run: |
          rustup update stable
          rustup default stable
          rustup component add rustfmt clippy

      # Use direct cargo command
      - name: Build release binary
        run: cargo build --release

      - name: Create platform directory and copy binary (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          mkdir ${{ matrix.platform_name }}
          cd target/release
          copy neaten.exe ..\..\${{ matrix.platform_name }}\neaten.exe
        shell: cmd

      - name: Create platform directory and copy binary (Unix-like)
        if: matrix.os != 'windows-latest'
        run: |
          mkdir ${{ matrix.platform_name }}
          cd target/release
          cp neaten ../../${{ matrix.platform_name }}/neaten

      - name: Create ZIP archive
        run: |
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            7z a ${{ matrix.platform_name }}.zip ${{ matrix.platform_name }}
          else
            zip -r ${{ matrix.platform_name }}.zip ${{ matrix.platform_name }}
          fi
        shell: bash

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.platform_name }}.zip
          path: ${{ matrix.platform_name }}.zip
          retention-days: 1

  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [publish, build]
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch all history and tags

      - name: Download all artifacts
        uses: actions/download-artifact@v4

      # List directories to debug
      - name: List directories
        run: find . -type f -name "*.zip" | sort

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.publish.outputs.new_version }}
          name: Release ${{ needs.publish.outputs.new_version }}
          files: |
            */*.zip
          generate_release_notes: true
