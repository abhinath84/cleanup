name: Build and Release

on:
  push:
    tags:
      - 'v*'

jobs:
  # publish:
  #   runs-on: ubuntu-latest
  #   # needs: all
  #   #  && needs.all.result =='success'
  #   # if: github.event_name == 'workflow_dispatch' && inputs.job_to_run == 'publish'

  #   steps:
  #     # Checkout the repository
  #     - name: Checkout code
  #       uses: actions/checkout@v4

  #     # Install dependencies
  #     - name: Install dependencies
  #       run: |
  #         cargo install cargo-release

  #     # create release
  #     - name: release
  #       env:
  #         CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
  #       run: |
  #         echo "Releasing a version..."
  #         cargo release --execute

  #     # punlish to crates.io
  #     - name: publish
  #       env:
  #         CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
        run: cargo publish

  build:
    name: Build for ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            artifact_name: neaten
            asset_name: neaten-linux-amd64
          - os: windows-latest
            artifact_name: neaten.exe
            asset_name: neaten-windows-amd64.exe
          - os: macos-latest
            artifact_name: neaten
            asset_name: neaten-macos-amd64

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Rust toolchain
      uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: stable
        override: true
        
    - name: Build release binary
      uses: actions-rs/cargo@v1
      with:
        command: build
        args: --release
      
    - name: Rename binary (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        cd target/release
        copy your-app.exe ..\..\${{ matrix.asset_name }}
      shell: cmd
    
    - name: Rename binary (Unix-like)
      if: matrix.os != 'windows-latest'
      run: |
        cd target/release
        cp your-app ../../${{ matrix.asset_name }}
      
    - name: Upload artifact
      uses: actions/upload-artifact@v3
      with:
        name: ${{ matrix.asset_name }}
        path: ${{ matrix.asset_name }}
        retention-days: 1

  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: build
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get version from tag
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
      
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ steps.get_version.outputs.VERSION }}
          draft: false
          prerelease: false
          generate_release_notes: true
      
      - name: Download all artifacts
        uses: actions/download-artifact@v3
        
      - name: Upload Linux Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./your-app-linux-amd64/your-app-linux-amd64
          asset_name: your-app-linux-amd64
          asset_content_type: application/octet-stream
      
      - name: Upload Windows Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./your-app-windows-amd64.exe/your-app-windows-amd64.exe
          asset_name: your-app-windows-amd64.exe
          asset_content_type: application/octet-stream
      
      - name: Upload macOS Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./your-app-macos-amd64/your-app-macos-amd64
          asset_name: your-app-macos-amd64
          asset_content_type: application/octet-stream
